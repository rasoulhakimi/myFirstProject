{"version":3,"sources":["logo.svg","Component/Header.js","Component/About.js","Component/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","color","this","setState","id","className","style","backgroundColor","href","onClick","Magic","data","mainContent","title","subtitile","Object","keys","link","map","social","console","log","url","margin","src","maxWidth","Component","About","props","about","aboutTitle","Card","secondContent","item","card","cardImage","alt","height","cardTitle","cardbody","cardFooterLink","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,uNC2D5BC,G,uEArDb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTC,MAAM,UAHG,E,oDAOXC,KAAKC,SAAS,CACZF,MAAyB,QAAnBC,KAAKF,MAAMC,MAAc,SAAS,U,+BAGjC,IAAD,OACJ,OAGN,yBAAKG,GAAG,IAAIC,UAAU,WAAWC,MAAO,CAACC,gBAAgBL,KAAKF,MAAMC,QAG5D,yBAAKI,UAAU,YACb,6BACD,4BAAQD,GAAG,QAAQC,UAAU,2BAA0B,uBAAGG,KAAK,OAAR,UACxD,4BAAQJ,GAAG,SAASC,UAAU,2BAA0B,uBAAGG,KAAK,SAAR,WACxD,4BAAQJ,GAAG,QAAQC,UAAU,0BAA0BI,QAAS,WAC5D,EAAKC,UADT,UAKE,4BAAKC,EAAKC,YAAYC,OACtB,4BACE,uBAAGL,KAAK,KAAKG,EAAKC,YAAYE,UAAU,IACxC,uBAAGN,KAAK,KAAKG,EAAKC,YAAYE,UAAU,IACxC,uBAAGN,KAAK,KAAKG,EAAKC,YAAYE,UAAU,KAG1C,6BACGC,OAAOC,KAAKL,EAAKC,YAAYK,MAAMC,KAAI,SAACC,GAEvC,OADAC,QAAQC,IAAIF,GAEP,kBAAC,aAAD,CAAYG,IAAKX,EAAKC,YAAYK,KAAKE,GAASb,MAAO,CAACiB,OAAO,cAKxE,6BACJ,uBAAGf,KAAK,OAAM,yBAAKJ,GAAG,WAAWoB,IAAI,iBAAiBlB,MAAO,CAACmB,SAAS,kB,GA7C1DC,cCeNC,G,8KAdX,OACE,yBAAKvB,GAAG,KAAKC,UAAS,yBAAoBH,KAAK0B,MAAMvB,YACnD,yBAAKA,UAAU,0BACb,4BAAKM,EAAKkB,OACV,4BAAKlB,EAAKmB,YACV,6BACI,uBAAGtB,KAAK,SAAQ,yBAAKJ,GAAG,WAAWoB,IAAI,iBAAiBlB,MAAO,CAACmB,SAAS,kB,GARnEC,cC+BLK,G,8KA5BX,OAEE,yBAAK3B,GAAG,OAAOC,UAAU,0BAEtBM,EAAKqB,cAAcd,KAAI,SAACe,GACvB,OAEE,yBAAK5B,UAAU,QACb,yBACEA,UAAU,eACVmB,IAAKS,EAAKC,KAAKC,UACfC,IAAI,cACN9B,MAAO,CAAC+B,OAAO,WACf,wBAAIhC,UAAU,cAAc4B,EAAKC,KAAKI,WACtC,yBAAKjC,UAAU,aAEb,wBAAIA,UAAU,aAAa4B,EAAKC,KAAKK,UACtC,uBAAG/B,KAAMyB,EAAKC,KAAKM,eAAgBnC,UAAU,aAA7C,IAA0D,4BAAQA,UAAU,wBAAlB,iBAKjE,4BAAQD,GAAG,QAAQC,UAAU,QAAO,uBAAGG,KAAK,MAAK,yBAAMgB,IAAI,eAAelB,MAAO,CAACmB,SAAS,iB,GAxBhFC,cC2BJe,E,uKAfX,OACE,6BAGE,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEE,kBAAC,EAAD,W,GAVQf,aCHEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.466d9f0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport data from \"../Component/data.json\";\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport \"./Header.css\"\r\nclass Header extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      color:\"yellow\"\r\n    }\r\n  }\r\n  Magic(){\r\n    this.setState({\r\n      color:this.state.color===\"red\"?\"yellow\":\"red\"\r\n    })\r\n  }\r\n    render(){\r\n        return(\r\n         \r\n        \r\n  <div id=\"h\" className=\" section\" style={{backgroundColor:this.state.color }}>\r\n    \r\n        \r\n          <div className=\"flexItem\">\r\n            <div>\r\n           <button id=\"About\" className=\"btn btn-outline-primary\"><a href=\"#ab\">About</a></button>\r\n          <button id=\"Skills\" className=\"btn btn-outline-primary\"><a href=\"#card\">skills</a></button>\r\n          <button id=\"Magic\" className=\"btn btn-outline-primary\" onClick={()=>{\r\n              this.Magic()\r\n          }}>Magic</button>\r\n            </div>\r\n     \r\n            <h1>{data.mainContent.title}</h1>\r\n            <h3>\r\n              <a href=\"#\">{data.mainContent.subtitile[0]}</a>\r\n              <a href=\"#\">{data.mainContent.subtitile[1]}</a>\r\n              <a href=\"#\">{data.mainContent.subtitile[2]}</a>\r\n            </h3>\r\n\r\n            <div>\r\n              {Object.keys(data.mainContent.link).map((social)=>{\r\n                console.log(social)\r\n                return(\r\n                     <SocialIcon url={data.mainContent.link[social]} style={{margin:\"10px\"}}/>               \r\n                )\r\n             \r\n              })}\r\n            </div>\r\n            <div>\r\n        <a href=\"#ab\"><img id=\"jumpDown\" src=\"image/down.png\" style={{maxWidth:\"30px\"}}></img></a>\r\n   \r\n            </div>\r\n          </div>\r\n        </div>\r\n           \r\n        )\r\n    }\r\n}\r\nexport default Header","import React, { Component } from \"react\";\r\nimport \"./Header.css\"\r\nimport data from \"../Component/data.json\";\r\nimport \"./About.css\"\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"ab\" className={`containerAbout ${this.props.className}`}>\r\n        <div className=\"containerAbout section\">\r\n          <h1>{data.about}</h1>\r\n          <h4>{data.aboutTitle}</h4>\r\n          <div>\r\n              <a href=\"#card\"><img id=\"jumpDown\" src=\"image/down.png\" style={{maxWidth:\"30px\"}}></img></a>\r\n            </div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default About;\r\n","import React from \"react\";\r\nimport react, { Component } from \"react\";\r\nimport data from \"./data.json\";\r\nimport \"./Card.css\";\r\nimport bts from \"bootstrap/dist/css/bootstrap.min.css\";\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      \r\n      <div id=\"card\" className=\"containerCard section \">\r\n       \r\n        {data.secondContent.map((item) => {\r\n          return (\r\n            \r\n            <div className=\"card\">\r\n              <img\r\n                className=\"card-img-top\"\r\n                src={item.card.cardImage}\r\n                alt=\"card-header\"\r\n              style={{height:\"225px\"}}/>\r\n              <h2 className=\"card-tilte\">{item.card.cardTitle}</h2>\r\n              <div className=\"card-body\">\r\n                \r\n                <h6 className=\"card-text\">{item.card.cardbody}</h6>\r\n               <a href={item.card.cardFooterLink} className=\"card-link\"> <button className=\"btn btn-outline-info\">more...</button></a>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <button id=\"uptop\" className=\"btn \"><a href=\"#h\"><img  src=\"image/up.png\" style={{maxWidth:\"40px\"}}></img></a></button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","//import React from \"react\";\nimport logo from \"./logo.svg\";\nimport ReactDOM from 'react-dom';\nimport \"./App.css\";\nimport data from \"./Component/data.json\";\nimport React, { Component } from \"react\";\n\nimport { SocialIcons } from \"react-social-icons\";\nimport { render } from \"@testing-library/react\";\nimport bootstrap from \"react-bootstrap\";\nimport bts from \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Header from \"./Component/Header.js\";\nimport About from \"./Component/About.js\";\nimport Card from \"./Component/Card\";\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      \n        {/* section header */}\n        <Header />\n        {/* section about */}\n        <About />\n        {/* section card */}\n        { <Card/> }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}